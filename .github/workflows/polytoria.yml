name: Polytoria Update

on:
  schedule:
    - cron: '*/15 * * * *'
  push:
    branches:
      - main

jobs:
  update:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Fetch Polytoria updates
      id: fetch-updates
      run: |
        $response = Invoke-WebRequest -Uri 'https://api.polytoria.com/v1/launcher/updates?os=windows&release=stable' -UseBasicParsing
        $json = $response.Content | ConvertFrom-Json
        echo "::set-output name=version::${json.Client.Version}"
        echo "::set-output name=download_url::${json.Client.Download}"

    - name: Check if client version exists
      id: check-version
      run: |
        if (Test-Path "./versions/${{ steps.fetch-updates.outputs.version }}") {
          echo "Client version already exists. Cancelling."
          exit 0
        }

    - name: Download and unzip client
      if: steps.check-version.outputs.version == ''
      run: |
        $downloadUrl = '${{ steps.fetch-updates.outputs.download_url }}'
        $outputPath = 'client.7z'
        Invoke-WebRequest -Uri $downloadUrl -OutFile $outputPath
        7z x $outputPath -o"client"

    - name: Run Polytoria Client
      if: steps.check-version.outputs.version == ''
      run: |
        Start-Process -FilePath "client/Polytoria Client.exe" -ArgumentList "--dump-api" -Wait

    - name: Upload ReflectionData.xml
      if: steps.check-version.outputs.version == ''
      run: |
        $version = '${{ steps.fetch-updates.outputs.version }}'
        $reflectionDataPath = [Environment]::GetFolderPath('MyDocuments') + "\Polytoria Scripting API Dump\ReflectionData.xml"
        $destPath = "./versions/$version/ReflectionData.xml"
        mkdir -p (Split-Path -Parent $destPath)
        Copy-Item $reflectionDataPath -Destination $destPath
        git add $destPath
        git commit -m "Add ReflectionData.xml for version $version"
        git push

    - name: Generate changes.md
      if: steps.check-version.outputs.version == ''
      run: |
        $version = '${{ steps.fetch-updates.outputs.version }}'
        $previousVersion = Get-ChildItem -Directory ./versions | Sort-Object Name | Select-Object -Last 2 | Select-Object -First 1
        $oldFile = "./versions/$($previousVersion.Name)/ReflectionData.xml"
        $newFile = "./versions/$version/ReflectionData.xml"
        $changesFile = "./versions/$version/changes.md"
        python ./scripts/generate_changes.py $oldFile $newFile $changesFile
        git add $changesFile
        git commit -m "Add changes.md for version $version"
        git push
